Práticas avançadas em projetos com reactJs

Ciclo de vida do reactJs
ComponentWillMount (deprecated 17.0)
ComponentWillReceiveProps (deprecated 17.0)
ComponentWillUpdate (deprecated 17.0)



Fragmentos
- Um padrão comum no react é que um componente pode retornar múltiplos elementos.
Os fragmentos permitem agrupar uma lista de filhos sem adicionar nós extras ao DOM
- React.Fragment 
import React, { Fragment } from 'react'

Error Boundaries
- Um erro de Javascript em uma parte da UI não deve quebrar toda aplicação.
Para resolver este problema para usuários do React a v.16 introduziu um novo conceito
chamado de "error boundary"
- Não captura erro em: 
    Manipuladores de evento
    Código assíncrono (ex: callbacks de setTimeout ou requestAnimationFrame)
    Renderização no servidor
    Erros lançados na própria error boundary (ao invés de em seus filhos)

Render Props
- O termo render prop se refere a uma técnica de compartilhar código entre
componentes React passando uma prop cujo valor é uma função
- Um componente com uma render prop recebe uma função que retorna um elemento
React e a invoca no momento de renderização, não sendo necessário para o componente 
implementar uma lógica própria

Typechecking
- Na medida em que sua aplicação cresce, você pode capturar muitos bugs com checagem
de tipos. Em algumas aplicações, você pode usar extensões do Javascript como Flow
ou Typescript para checar os tipos de toda a sua aplicação. Porém, mesmo se você não
usá-las, React possui algumas habilidades de checagem de tipos nativas.

Refs e DOM
- Com refs é possível acessar a árvore do DOM e/ou elementos React
- Quando utilizar:
    Manipulação de bibliotecas de terceiros
    Gerenciamento de inputs (foco), seleção de textos ou reprodução de mídias
    Animações imperativas



DumbComponent
- Preocupa-se com a apresentação
- Recebem valores via Props
- Não possuem dependências com o restante da aplicação
- Não especificam como os dados são carregados ou sofrem mutação
- Recebem valores e callbacks exclusivamente via Props
- Raramente possuem estado, quando precisam de estado é para controlar a interface e 
não dados do usuário
- São escritos na maioria das vezes como componentes funcionais
Exemplos: Button, Card, Sidebar, Footer, List, Menu

Smart components 
- Preocupam-se como as coisas vão funcionar
- Podem conter Smart e Dumb components 
- Providenciam dados e padrões de apresentação ou outros containers
- Na maioria dos casos possuem estado e podem chamar outros fluxos do sistema
Exemplos: UserGallery, UserPage, FilterBook, FollowersSidebar, ListCards

